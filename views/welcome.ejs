<header>
        <nav class="container">
            <a href="#" class="logo">Express MVC</a>
            <ul class="nav-links">
                <li><a href="#home">Beranda</a></li>
                <li><a href="#features">Fitur</a></li>
                <li><a href="#stats">Statistik</a></li>
            </ul>
        </nav>
    </header>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="container">
            <div class="hero-content">
                <div class="hero-text">
                    <h2>Starter Pack</h2>
                    <h1>Express MVC</h1>
                    <p>Starter pack Express.js dengan arsitektur MVC + service layer adalah pondasi kuat untuk aplikasi yang bersih, scalable, dan maintainable.</p>
                    <a href="#features" class="cta-button">Dwonload Starterpack</a>
                </div>
                <div class="hero-logo">
                    <div >
                        <img class="express-logo" src="/image/js.png" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="features">
        <div class="container">
            <h2 class="section-title fade-in">Fitur-Fitur</h2>
            <div class="features-grid">
                <div class="feature-card fade-in">
                    <div class="feature-icon">⚡</div>
                    <h3>Template Engine EJS</h3>
                    <p>EJS adalah template engine yang digunakan untuk membuat tampilan HTML dinamis dalam aplikasi Node.js, terutama bersama framework seperti Express.js.</p>
                </div>
                <div class="feature-card fade-in">
                    <div class="feature-icon">🔧</div>
                    <h3>MVC</h3>
                    <p>Arsitektur MVC memberikan struktur yang jelas dalam pengembangan aplikasi dengan cara memisahkan logika bisnis, tampilan, dan kontrol alur data sehingga mempermudah proses pengujian dan pengembangan skala besar.</p>
                </div>
                <div class="feature-card fade-in">
                    <div class="feature-icon">🌐</div>
                    <h3>Service Layers </h3>
                    <p>Dengan menambahkan service layer dalam arsitektur MVC, Menciptakan sistem yang lebih bersih, scalable, dan maintainable. Ini adalah pendekatan profesional yang sangat dianjurkan dalam aplikasi backend modern.</p>
                </div>
                <div class="feature-card fade-in">
                    <div class="feature-icon">📱</div>
                    <h3>Mobile Ready</h3>
                    <p>Perfect untuk membangun RESTful API yang mendukung aplikasi mobile dan web modern.</p>
                </div>
                <div class="feature-card fade-in">
                    <div class="feature-icon">🔒</div>
                    <h3>Keamanan Terjamin</h3>
                    <p>Dilengkapi dengan fitur keamanan standar industri untuk melindungi aplikasi Anda dari berbagai ancaman.</p>
                </div>
                <div class="feature-card fade-in">
                    <div class="feature-icon">⚙️</div>
                    <h3>Highly Configurable</h3>
                    <p>Fleksibilitas penuh untuk mengkonfigurasi aplikasi sesuai kebutuhan spesifik proyek Anda.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Stats Section -->
    <section id="stats" class="stats">
        <div class="container">
            <h2 class="section-title">Express.js dalam Angka</h2>
            <div class="stats-grid">
                <div class="stat-item fade-in">
                    <h3>29M+</h3>
                    <p>Download Mingguan</p>
                </div>
                <div class="stat-item fade-in">
                    <h3>60K+</h3>
                    <p>GitHub Stars</p>
                </div>
                <div class="stat-item fade-in">
                    <h3>5M+</h3>
                    <p>Website Menggunakan</p>
                </div>
                <div class="stat-item fade-in">
                    <h3>10+</h3>
                    <p>Tahun Pengembangan</p>
                </div>
            </div>
        </div>
    </section>


    <!-- Footer -->
    <footer id="contact">
        <div class="container">
            <div class="footer-links">
                <a href="#">Dokumentasi</a>
                <a href="#">Tutorial</a>
                <a href="#">Community</a>
                <a href="#">GitHub</a>
                <a href="#">Support</a>
            </div>
        </div>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Fade in animation on scroll
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver(function(entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        }, observerOptions);

        // Observe all fade-in elements
        document.querySelectorAll('.fade-in').forEach(el => {
            observer.observe(el);
        });

        // Animate stats when visible
        const statsSection = document.querySelector('.stats');
        const statNumbers = document.querySelectorAll('.stat-item h3');
        let statsAnimated = false;

        const statsObserver = new IntersectionObserver(function(entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting && !statsAnimated) {
                    statsAnimated = true;
                    animateStats();
                }
            });
        }, { threshold: 0.5 });

        statsObserver.observe(statsSection);

        function animateStats() {
            const stats = [
                { element: statNumbers[0], target: 29, suffix: 'M+' },
                { element: statNumbers[1], target: 60, suffix: 'K+' },
                { element: statNumbers[2], target: 5, suffix: 'M+' },
                { element: statNumbers[3], target: 10, suffix: '+' }
            ];

            stats.forEach((stat, index) => {
                setTimeout(() => {
                    animateNumber(stat.element, stat.target, stat.suffix);
                }, index * 200);
            });
        }

        function animateNumber(element, target, suffix) {
            let current = 0;
            const increment = target / 50;
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                element.textContent = Math.floor(current) + suffix;
            }, 30);
        }

        // Header background on scroll
        window.addEventListener('scroll', () => {
            const header = document.querySelector('header');
            if (window.scrollY > 100) {
                header.style.background = 'rgba(255, 255, 255, 0.98)';
            } else {
                header.style.background = 'rgba(255, 255, 255, 0.95)';
            }
        });
    </script>